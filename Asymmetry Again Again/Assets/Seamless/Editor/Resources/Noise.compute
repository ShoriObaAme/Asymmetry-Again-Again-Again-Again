#pragma kernel Noise

#include "Common.hlsl"

float Width;
float Height;
 float uVoronoi;
 float uBlur;
 float uPanX;
 float uPanY;
 float uScaleX;
 float uScaleY;
RWTexture2D<float4> Output;

float hashf(float n) { int q = int(n); return float((0x3504f333 * q * q + q) * (0xf1bbcdcb * q * q + q)) * (2.f / 8589934592.f) + .5f; }

float noise(float3  x)
{
    float3 p = floor(x);
    float3 f = frac(x);
    f = f * f * (3.f - 2.0f * f);

    float n = p.x + p.y * 57 + 113 * p.z;
    float res = lerp(lerp(lerp(hashf(n), hashf(n + 1), f.x),
        lerp(hashf(n + 57), hashf(n + 58), f.x), f.y),
        lerp(lerp(hashf(n + 113), hashf(n + 114), f.x),
            lerp(hashf(n + 170), hashf(n + 171), f.x), f.y), f.z);
    return res;
}

float3 noise3d(float2 x) { return float3(noise(float3(x.x, x.y, x.y) * 100.f), noise(float3(x.y, x.x, x.x) * 200.f), noise(float3(x.y, x.x, x.y) * 300.f)); }

float3 hash3(float2 p) { return frac(sin(float3(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)), dot(p, float2(419.2, 371.9)))) * 43758.5453f); }


float iqnoise(float2 x, float u, float v)
{
    float va = 0;
    float wt = 0;
    for (float j = -2; j <= 2; ++j)
        for (float i = -2; i <= 2; ++i)
        {
            float3 o = hash3(mod(floor(x) + float2(i, j), float2(uScaleX, uScaleY))) * float3(u, u, 1);
            //float2 o     = Hash2(mod(floor(x) + float2(i, j), vec2(uScaleX, uScaleY)), 0) * float2(u, u); // voronoise
            float2 r = float2(i, j) - frac(x) + float2(o.xy);
            float ww = pow(abs(1 - smoothstep(.0f, 1.414f, sqrt(dot(r, r)))), 1 + 63 * pow(abs(1 - v), 4));
            va += o.z * ww;
            wt += ww;
        }
    return va / wt;
}


[numthreads(8,8,1)]
void Noise(uint3 id : SV_DispatchThreadID)
{
    float2 lUV = float2(id.x / Width, id.y / Height);
    float4 lInputColor = float4(1.0 , 0.0, 1.0, 1.0);
    float lPattern = iqnoise(float2((lUV.x + (uPanX * (0.5 / uScaleX)) + lInputColor.r) * uScaleX, (lUV.y + (uPanY * (0.5 / uScaleY)) + lInputColor.g) * uScaleY), uVoronoi, uBlur);
    //float lPattern = iqnoise(lUV * 10.0, uVoronoi, uBlur);
    Output[id.xy] = float4(lPattern, lPattern, lPattern, 1.0);
    //Output[id.xy] = float4(lUV, lPattern, 1.0);
}

